// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as List from "../../../node_modules/bs-platform/lib/es6/list.js";
import * as Circuits$CircuitVisualiser from "./Circuits.bs.js";
import * as Constructs$CircuitVisualiser from "./Constructs.bs.js";

var halfAdder = Circuits$CircuitVisualiser.macro(Constructs$CircuitVisualiser.v, "hadd", "+_{half}", Circuits$CircuitVisualiser.composemany(/* :: */[
          Circuits$CircuitVisualiser.dfork(Constructs$CircuitVisualiser.v, 2),
          /* :: */[
            Circuits$CircuitVisualiser.tensor(/* :: */[
                  Constructs$CircuitVisualiser.xorGate(Constructs$CircuitVisualiser.v),
                  /* :: */[
                    Constructs$CircuitVisualiser.andGate(Constructs$CircuitVisualiser.v),
                    /* [] */0
                  ]
                ]),
            /* [] */0
          ]
        ]), /* [] */0);

var fullAdder = Circuits$CircuitVisualiser.macro(Constructs$CircuitVisualiser.v, "fadd", "+_{full}", Circuits$CircuitVisualiser.composemany(/* :: */[
          Circuits$CircuitVisualiser.tensor(/* :: */[
                Circuits$CircuitVisualiser.dfork(Constructs$CircuitVisualiser.v, 2),
                /* :: */[
                  Circuits$CircuitVisualiser.idcirc(Constructs$CircuitVisualiser.v, 1),
                  /* [] */0
                ]
              ]),
          /* :: */[
            Circuits$CircuitVisualiser.tensor(/* :: */[
                  Circuits$CircuitVisualiser.idcirc(Constructs$CircuitVisualiser.v, 2),
                  /* :: */[
                    Circuits$CircuitVisualiser.swap(Constructs$CircuitVisualiser.v, 2, 1),
                    /* [] */0
                  ]
                ]),
            /* :: */[
              Circuits$CircuitVisualiser.tensor(/* :: */[
                    Constructs$CircuitVisualiser.xorGate(Constructs$CircuitVisualiser.v),
                    /* :: */[
                      Circuits$CircuitVisualiser.idcirc(Constructs$CircuitVisualiser.v, 3),
                      /* [] */0
                    ]
                  ]),
              /* :: */[
                Circuits$CircuitVisualiser.tensor(/* :: */[
                      Circuits$CircuitVisualiser.dfork(Constructs$CircuitVisualiser.v, 2),
                      /* :: */[
                        Circuits$CircuitVisualiser.idcirc(Constructs$CircuitVisualiser.v, 2),
                        /* [] */0
                      ]
                    ]),
                /* :: */[
                  Circuits$CircuitVisualiser.tensor(/* :: */[
                        Constructs$CircuitVisualiser.xorGate(Constructs$CircuitVisualiser.v),
                        /* :: */[
                          Constructs$CircuitVisualiser.andGate(Constructs$CircuitVisualiser.v),
                          /* :: */[
                            Constructs$CircuitVisualiser.andGate(Constructs$CircuitVisualiser.v),
                            /* [] */0
                          ]
                        ]
                      ]),
                  /* :: */[
                    Circuits$CircuitVisualiser.tensor(/* :: */[
                          Circuits$CircuitVisualiser.idcirc(Constructs$CircuitVisualiser.v, 1),
                          /* :: */[
                            Constructs$CircuitVisualiser.orGate(Constructs$CircuitVisualiser.v),
                            /* [] */0
                          ]
                        ]),
                    /* [] */0
                  ]
                ]
              ]
            ]
          ]
        ]), /* [] */0);

var halfAdderApplied = Circuits$CircuitVisualiser.composemany(/* :: */[
      Circuits$CircuitVisualiser.tensor(/* :: */[
            Constructs$CircuitVisualiser.t,
            /* :: */[
              Constructs$CircuitVisualiser.f,
              /* [] */0
            ]
          ]),
      /* :: */[
        halfAdder,
        /* [] */0
      ]
    ]);

var exampleFunctions = List.concat(/* :: */[
      Circuits$CircuitVisualiser.specialMorphisms(Constructs$CircuitVisualiser.v),
      /* :: */[
        /* :: */[
          Constructs$CircuitVisualiser.id(Constructs$CircuitVisualiser.v, 1),
          /* :: */[
            Circuits$CircuitVisualiser.funcBlackBox(Constructs$CircuitVisualiser.v, "k", "\\text{k}", 1, 1),
            /* :: */[
              Circuits$CircuitVisualiser.funcBlackBox(Constructs$CircuitVisualiser.v, "F", "\\text{F}", 1, 1),
              /* :: */[
                Circuits$CircuitVisualiser.funcBlackBox(Constructs$CircuitVisualiser.v, "G", "\\text{G}", 1, 1),
                /* :: */[
                  Circuits$CircuitVisualiser.funcBlackBox(Constructs$CircuitVisualiser.v, "A", "\\text{A}", 2, 2),
                  /* :: */[
                    Circuits$CircuitVisualiser.funcBlackBox(Constructs$CircuitVisualiser.v, "H", "\\text{H}", 1, 2),
                    /* :: */[
                      Circuits$CircuitVisualiser.funcBlackBox(Constructs$CircuitVisualiser.v, "test", "\\text{test}", 3, 2),
                      /* :: */[
                        Circuits$CircuitVisualiser.funcBlackBox(Constructs$CircuitVisualiser.v, "a", "\\text{a}", 1, 1),
                        /* :: */[
                          Circuits$CircuitVisualiser.funcBlackBox(Constructs$CircuitVisualiser.v, "b", "\\text{b}", 1, 1),
                          /* :: */[
                            Circuits$CircuitVisualiser.funcBlackBox(Constructs$CircuitVisualiser.v, "c", "\\text{c}", 1, 1),
                            /* :: */[
                              Circuits$CircuitVisualiser.funcBlackBox(Constructs$CircuitVisualiser.v, "d", "\\text{d}", 1, 1),
                              /* :: */[
                                Circuits$CircuitVisualiser.funcBlackBox(Constructs$CircuitVisualiser.v, "e", "\\text{e}", 2, 1),
                                /* :: */[
                                  Constructs$CircuitVisualiser.andGate(Constructs$CircuitVisualiser.v),
                                  /* :: */[
                                    Constructs$CircuitVisualiser.orGate(Constructs$CircuitVisualiser.v),
                                    /* :: */[
                                      Constructs$CircuitVisualiser.xorGate(Constructs$CircuitVisualiser.v),
                                      /* :: */[
                                        Constructs$CircuitVisualiser.notGate(Constructs$CircuitVisualiser.v),
                                        /* :: */[
                                          Constructs$CircuitVisualiser.multiplexer(Constructs$CircuitVisualiser.v),
                                          /* :: */[
                                            Constructs$CircuitVisualiser.first(Constructs$CircuitVisualiser.v),
                                            /* :: */[
                                              Constructs$CircuitVisualiser.second(Constructs$CircuitVisualiser.v),
                                              /* :: */[
                                                Constructs$CircuitVisualiser.id(Constructs$CircuitVisualiser.v, 2),
                                                /* [] */0
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ],
        /* [] */0
      ]
    ]);

var exampleMacros_001 = /* :: */[
  fullAdder,
  /* [] */0
];

var exampleMacros = /* :: */[
  halfAdder,
  exampleMacros_001
];

export {
  halfAdder ,
  fullAdder ,
  halfAdderApplied ,
  exampleFunctions ,
  exampleMacros ,
  
}
/* halfAdder Not a pure module */
